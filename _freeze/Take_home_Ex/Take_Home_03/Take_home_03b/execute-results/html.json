{
  "hash": "888794a2330af17da591c7741dd9bc3b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Prepration for Take Home Exercise 03b\"\nauthor: \"Dew Stella Chan\"\ndate: \"October 27, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\n# Scope of this analysis:\n\nThe scope of this analysis is to focus on building predictive model for predicting the 5- room HDB resale price in Singapore.\n\nThe model is calibrated using the 5-room flat transactions from January 2023 to September 2024, and then random select of sample 6,500 were extracted to form the part of the training and test data.\n\nThe process of data preparation was carried out using all the HDB transactions from January 2023 to September 2024.\n\n# R Packages used in this Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, tmap, rsample, Metrics, tidyverse, sf, httr, jsonlite, rvest, xml2, SpatialML, knitr, kableExtra)\n#rvest is used to harvest data from OneMap API\n```\n:::\n\n\n\n# Data Preparation.\n\n### Loading of Resale HDB Data\n\nThis is the subset of the resales data from 2023 Jan to Sep 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/resale.csv\") \n```\n:::\n\n\n\nThe following code block is to:\n\n-   combine the block and street names together to form address field.\n\n-   Extract out the the remaining lease in years and months.\n\n-   calculate the remaining lease in the months.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")%>%\n  mutate(address = paste(block, street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(str_sub(remaining_lease, 0, 2))) %>%\n  mutate(remaining_lease_mth = as.integer(str_sub(remaining_lease, 9, 11))) %>%\n  replace_na(list(remaining_lease_mth = 0)) %>%  # Replace NA in remaining_lease_mth with 0\n  mutate(rem_lease_inMths = remaining_lease_yr * 12 + remaining_lease_mth)\nwrite_rds(resale_tidy, \"data/rds/resale_tidy.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <-read_rds(\"data/rds/resale_tidy.rds\")\n```\n:::\n\n\n\n#### Reverse Geo-coding using the address of the resale HDB data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_tidy$address))\n```\n:::\n\n\n\n### Loading of School data\n\nThe general information of the school data downloaded from data.gov.sg. The popular primary school is determined by over subscription at phrase 2B and 2C of 2023 and 2024 primary one school registration exercise. The outcome of the registration are from the following website:\n\n-   https://www.creativecampus.com.sg/best-primary-schools-in-Singapore-2024\n\n-   https://elite.com.sg/primary-schools\n\nThe schools which are oversubscribed at either of the phases are assessed as popular primary.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSch <- read_csv(\"data/School.csv\")\nwrite_rds(Sch, \"data/rds/sch.rds\")\n```\n:::\n\n\n\n### Reverse Geo-coding using the address of the school.\n\nTo group the list of unique addresses for reverse Geo-coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(Sch$address))\n```\n:::\n\n\n\n### List of shopping mall in Singapore\n\nThe following list of shopping malls was extracted from Wikipedia.\n\n-   https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmall_list <- c(\"100 AM\", \"313@Somerset\", \"Aperia\", \"Balestier Hill Shopping Centre\",\"Bugis Cube\", \"Bugis Junction\", \"Bugis+\", \"Capitol Piazza\", \"Cathay Cineleisure Orchard\", \"Clarke Quay Central\", \"The Centrepoint\", \"City Square Mall\", \"City Gate Mall\", \"CityLink Mall\", \"Duo\", \"Far East Plaza\", \"Funan\", \"Great World City\", \"HDB Hub\", \"Holland Village Shopping Mall\", \"ION Orchard\", \"Junction 8\", \"Knightsbridge\", \"Liat Towers\", \"Lucky Plaza\", \"Marina Bay Sands\", \n\"The Shoppes at Marina Bay Sands\", \"Marina Bay Link Mall\", \n\"Marina Square\", \"Millenia Walk\", \"Mustafa 1 entre\", \"Ngee Ann City\", \"One Holland Village\", \"Orchard Central\", \"Orchard Gateway\", \n\"Orchard Plaza\", \"Midpoint Orchard\", \"Palais Renaissance\", \"People's Park Centre\", \"People's Park Complex\", \"Plaza Singapura\",\"GRiD(pomo)\", \"Raffles City\", \"Scotts Square\", \"Shaw House and Centre\", \"Sim Lim Square\", \"Singapore Shopping Centre\", \"The South Beach\", \"Square 2\", \"Sunshine Plaza\", \"Suntec City\", \"Tanglin Mall\", \"Tanjong Pagar Centre\", \"Tekka Centre\", \"The Adelphi\", \"The Paragon\",\"Tiong Bahru Plaza\", \"The Poiz\", \"Thomson Plaza\", \"United Square\", \"Thomson V\", \"Velocity@Novena Square\", \"Wheelock Place\", \"Wisma Atria\",\"Zhongshan Mall\",\"Bedok Mall\", \"Century Square\", \"City Plaza\", \"Changi City Point\",\"Downtown East\", \"Djitsun Mall Bedok\", \"Eastpoint Mall\",\"Jewel Changi Airport\", \"KINEX\", \"Katong Shopping Centre\", \"Katong Square\", \"Kallang Wave Mall\", \"Leisure Park Kallang\", \"i12 Katong\",\"Our Tampines Hub\", \"Parkway Parade\", \"Pasir Ris Mall\", \"Pasir Ris West Plaza\",\"Paya Lebar Square\", \"Paya Lebar Quarter\", \"Roxy Square\", \"Singpost Centre\", \"Tampines 1\", \"Tampines Mall\", \"White Sands\", \"Elias Mall\", \"Loyang Point\", \"888 Plaza\", \"Admiralty Place\", \"AMK Hub\", \"Canberra Plaza\", \"Causeway Point\", \"HDB Hub\", \"Broadway Plaza\", \"Jubilee Square\", \"Junction 8\", \"Junction Nine\", \"Marsiling Mall\", \"Northpoint City\", \"Sembawang Shopping Centre\", \"Sun Plaza\", \"Vista Point\", \"Wisteria Mall\", \"Woodlands Civic Centre\", \"Woodlands Mart\", \"Woodlands North Plaza\",\"Anchorvale Village\", \"Buangkok Square\", \"Compass One\", \"Greenwich V\", \"Heartland Mall\", \"Hougang 1\", \"Hougang Green Shopping Mall\", \"Hougang Mall\", \"NEX\", \"Northshore Plaza\", \"Oasis Terraces\", \"Punggol Coast Mall\", \"Punggol Plaza\", \"Rivervale Mall\", \"Rivervale Plaza\", \"Sengkang Grand Mall\", \"The Seletar Mall\", \"Upper Serangoon Shopping Centre\", \"Waterway Point\", \"myVillage At Serangoon Garden, shopping_malls\", \"Beauty World Centre\", \"Beauty World Plaza\", \"Bukit Panjang Plaza\", \"Bukit Timah Plaza\", \"Fajar Shopping Centre\", \"Greenridge Shopping Centre\", \"Hillion Mall\", \"HillV2\", \"Junction 10\", \"Keat Hong Shopping Centre\", \"Limbang Shopping Centre\", \"Lot One\", \"Rail Mall\", \"Sunshine Place\", \"Teck Whye Shopping Centre\", \"West Mall\", \"Yew Tee Point\", \"Yew Tee Square\", \"VivoCity\", \"HarbourFront Centre\", \"Alexandra Retail Centre\", \"321 Clementi\", \"The Clementi Mall\", \"IMM\", \"Jem\", \"Westgate\", \"Jurong Point\", \"Pioneer Mall\", \"The Star Vista\", \"Alexandra Central\", \"Anchorpoint\", \"OD Mall\", \"Boon Lay Shopping Centre\", \"Grantral Mall\", \"Fairprice Hub\", \"Gek Poh Shopping Centre\", \"Rochester Mall\", \"Taman Jurong Shopping Centre\", \"West Coast Plaza\",\"Plantation Plaza\", \"Tengah Mall (2027)\", \"Queensway Shopping Centre\", \"The Rail Mall\" )\n```\n:::\n\n\n\n#### Reverse Geo-coding using the address of the shopping mall\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(mall_list))\n```\n:::\n\n\n\n### Reverse Geo-coding using One Map API.\n\nFunction to get the address from SLA API via reverse geo-coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#creation of functions. \nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append, can be change to x and y, and it will be projected coordinate system. \n    \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal, this is to accept failed geocoding. \n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n\n\n### Code to get the coordinates from One Map API\n\nThe following code chunk will return with the coordinates of the HDB resales flats, school and shopping mall, depending what have been added to the add_list.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#last run is Shopping mall \ncoords<- get_coords(add_list)\n```\n:::\n\n\n\n### Codes to write the coordinates to rds folder.\n\nThe data frame coords in rds folder contains all the HDB transactions coordinates.\n\n***The following two code chunks should be not re-run, so the coordinates of HDB transaction will not be replaced.***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords, \"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <-read_rds(\"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_sgeo <- merge(coords,resale_tidy)\nwrite_rds(resale_tidy_sgeo , \"data/rds/resale_tidy_sgeo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_sgeo <-read_rds(\"data/rds/resale_tidy_sgeo.rds\")\n```\n:::\n\n\n\n#### Converting the HDB Transaction data to spatial data.\n\nAs mentioned in the earlier section, the codes are in lag-long, we will need to transform the geographical systems.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo <-  st_as_sf(resale_tidy_sgeo,coords = c(\"longitude\", \"latitude\"),crs = 4326) %>% #project to WGS 84\n  st_transform(3414) #convert to SVY21\nwrite_rds(resale_tidy_geo, \"data/rds/resale_tidy_geo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo <-read_rds(\"data/rds/resale_tidy_geo.rds\")\n```\n:::\n\n\n\n### Converting the school data to spatial data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSch_sgeo <- merge(coords,Sch)\nwrite_rds(Sch_sgeo , \"data/rds/Sch_sgeo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSch_sgeo <-read_rds(\"data/rds/Sch_sgeo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSch_geo <-  st_as_sf(Sch_sgeo,coords = c(\n    \"longitude\", \"latitude\"),crs = 4326) %>% #project to WGS 84\n  st_transform(3414) #convert to SVY21\nwrite_rds(Sch_geo , \"data/rds/Sch_geo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSch_geo <-read_rds(\"data/rds/Sch_geo.rds\")\n```\n:::\n\n\n\n### Convert shopping mall list to spatial data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMall_sgeo <- coords\nMall_sgeo<- Mall_sgeo[Mall_sgeo$address != \"GRiD(pomo)\", ]\nwrite_rds(Mall_sgeo , \"data/rds/Mall_sgeo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMall_geo <-  st_as_sf(Mall_sgeo,coords = c(\"longitude\", \"latitude\"),crs = 4326) %>% #project to WGS 84\n  st_transform(3414) #convert to SVY21\nwrite_rds(Mall_geo , \"data/rds/Mall_geo.rds\")\n```\n:::\n\n\n\n####check the projection system The following code can be use to check the projection system.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(resale_tidy_geo)\n```\n:::\n\n\n\n## Loading spatial data layers:\n\nThe following code are the load the required spatial data to derive the predictors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"data/ChildCareServices.geojson\") %>%\n  st_transform(crs = 3414) %>% \n  st_zm()\n\neldercare <- st_read(dsn = \"data\", layer = \"ELDERCARE\")  %>%\n  st_transform(crs = 3414)\n\nKindergartens_sf <- st_read(\"data/Kindergartens.geojson\") %>%\n  st_transform(crs = 3414)%>%\n  st_zm()\n\nSupermkt_sf <- st_read(\"data/SupermarketsGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)%>%\n  st_zm()\n\nHC_sf <- st_read(\"data/HawkerCentresGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)%>%\n  st_zm()\n\nPark_sf <- st_read(\"data/NParksParksandNatureReserves.geojson\") %>%\n  st_transform(crs = 3414)%>%\n  st_zm()\n\nBusstop <- st_read(dsn = \"data\", layer = \"BusStop\")  %>%\n  st_transform(crs = 3414)\n\nMRT <- st_read(dsn = \"data\", layer = \"RapidTransitSystemStation\") %>%\n  st_transform(crs = 3414) %>% \n  filter(TYP_CD_DES==\"MRT\" & \n         !grepl(\"DEPOT|SUB STATION|BOCC\", toupper(STN_NAM_DE)))\n\nBusiness_district <- st_read(\"data/JTCBusinessParkLandGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)%>%\n  st_zm()\n\n#Based on URA information, Planning area  Downtown core formed the central business district. \nCBD <- st_read(dsn = \"data\", \n                  layer = \"MP14_SUBZONE_WEB_PL\") %>%\n  st_transform (3414) %>%\n  filter(PLN_AREA_N==\"DOWNTOWN CORE\")\n\nCBD <- st_union(CBD)\n\n\nwrite_rds(childcare_sf, \"data/rds/childcare_sf.rds\")\nwrite_rds(eldercare, \"data/rds/eldercare.rds\")\nwrite_rds(Kindergartens_sf, \"data/rds/Kindergartens_sf.rds\")\nwrite_rds(Supermkt_sf, \"data/rds/Supermkt_sf.rds\")\nwrite_rds(HC_sf, \"data/rds/HC_sf.rds\")\nwrite_rds(Park_sf, \"data/rds/Park_sf.rds\")\nwrite_rds(Busstop, \"data/rds/Busstop.rds\")\nwrite_rds(MRT, \"data/rds/MRT.rds\")\nwrite_rds(Business_district, \"data/rds/Business_district.rds\")\nwrite_rds(CBD, \"data/rds/CBD.rds\")\n```\n:::\n\n\n\nCodes to read the any particular layers from rds folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBusstop <-read_rds(\"data/rds/Busstop.rds\")\n```\n:::\n\n\n\n## Codes to the dervie predictors\n\nThe following section is to derive the predictors used for the predictive model.\n\n### Calculate the proximity to the nearest bu stop.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and all bus stops\ndist_bustop<- st_distance(resale_tidy_geo, Busstop)\n\n# Find the nearest bus stop for each HDB flat\nn_dist_bustop <- apply(dist_bustop, 1, min)\nresale_tidy_geo$PROX_Busstop <- n_dist_bustop\n```\n:::\n\n\n\n#Calculate the proximity to the nearest MRT station\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and all MRT\ndist_MRT<- st_distance(resale_tidy_geo, MRT)\n\n# Find the nearest MRT for each HDB flat\nn_dist_MRT<- apply(dist_MRT, 1, min)\nresale_tidy_geo$PROX_MRT <- n_dist_MRT\n```\n:::\n\n\n\n#Calculate the proximity to the nearest elder-care\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and all Eldercare centers \ndist_ecare<- st_distance(resale_tidy_geo,eldercare)\n\n# Find the nearest Eldercare for each HDB flat\nn_dist_ecare<- apply(dist_ecare, 1, min)\nresale_tidy_geo$PROX_eldercare <- n_dist_ecare\n```\n:::\n\n\n\n#Calculate the proximity to the nearest Food Centre/hawker centre\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and all hawker centre\ndist_hc<- st_distance(resale_tidy_geo,HC_sf)\n\n# Find the nearest Hawker centre for each HDB flat\nn_dist_HC_sf<- apply(dist_hc, 1, min)\nresale_tidy_geo$PROX_Hawker <- n_dist_HC_sf\n```\n:::\n\n\n\n#Calculate the proximity to the nearest Park\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and all Parks\ndist_PK<- st_distance(resale_tidy_geo,Park_sf)\n\n# Find the nearest Parks for each HDB flat\nn_dist_PK<- apply(dist_PK, 1, min)\nresale_tidy_geo$PROX_Park <- n_dist_PK\n```\n:::\n\n\n\n#Codes to get proximity to the nearest Supermarket\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and Supermarket\ndist_supermkt<- st_distance(resale_tidy_geo,Supermkt_sf)\n\n# Find the nearest Parks for each HDB flat\nn_dist_supermkt<- apply(dist_supermkt, 1, min)\nresale_tidy_geo$PROX_Supermarket <- n_dist_supermkt\n```\n:::\n\n\n\n#Codes to get proximity to the nearest shopping mall\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and shopping mall \ndist_Mall<- st_distance(resale_tidy_geo,Mall_geo)\n\n# Find the nearest Parks for each HDB flat\nn_dist_Mall<- apply(dist_Mall, 1, min)\nresale_tidy_geo$PROX_Mall <- n_dist_Mall\n```\n:::\n\n\n\n#Codes to get proximity to the regional business districts\n\nIn Singapore besides the central business districts there are other regional business districts, these area may have impact on local HDB resale prices.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat another business districts\ndist_OBD<- st_distance(resale_tidy_geo,Business_district)\n\n# Find the nearest Parks for each HDB flat\nn_dist_OBD<- apply(dist_OBD, 1, min)\nresale_tidy_geo$PROX_OtherBusinessdistricts <- n_dist_OBD\n```\n:::\n\n\n\n#Codes to get proximity to the CBD (Central Business District)\n\nBased on the URA data, the\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between each HDB flat and Supermarket\ndist_CBD <- st_distance(resale_tidy_geo,CBD)\n\nresale_tidy_geo$PROX_CBD <- dist_CBD\n\n\n# Extract the numeric value from the string\nresale_tidy_geo$PROX_CBD <- as.numeric(gsub(\"[^0-9.]\", \"\", resale_tidy_geo$PROX_CBD))\n```\n:::\n\n\n\n# Creation of buffer of 350m and 1 km from the HDB Resale flats.\n\nRe-creating the Resale Geo spatial layer without the proximity information.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_WP <-  st_as_sf(resale_tidy_sgeo,coords = c(\n    \"longitude\", \"latitude\"),crs = 4326) %>% #project to WGS 84\n  st_transform(3414) #convert to SVY21 \n```\n:::\n\n\n\n### Creation of 350m buffer using the following code chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_b350 <- st_buffer(resale_tidy_geo_WP, dist = 350)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_tidy_geo_b350, \"data/rds/resale_tidy_geo_b350.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_b350 <-read_rds(\"data/rds/resale_tidy_geo_b350.rds\")\n```\n:::\n\n\n\n### Creation of 1km buffer using the following code chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_b1km <- st_buffer(resale_tidy_geo_WP, dist = 1000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_tidy_geo_b1km, \"data/rds/resale_tidy_geo_b1km.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_b1km <-read_rds(\"data/rds/resale_tidy_geo_b1km.rds\")\n```\n:::\n\n\n\n## Intersect to the find the number of facilities within the specified range.\n\n### Number of childcare centers within 350m\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial join to identify intersections\nintersections <- st_intersects(resale_tidy_geo_b350, childcare_sf)\n\n# Count the number of intersections for each buffer\nnum_childcare <- lengths(intersections)\n\n# Add the count as a new column to the buffer layer\nresale_tidy_geo$num_childcare_350 <- num_childcare\n```\n:::\n\n\n\n#### Number of Kindergartens within 350m\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial join to identify intersections\nintersections <- st_intersects(resale_tidy_geo_b350, Kindergartens_sf)\n\n# Count the number of intersections for each buffer\nnum_Kindergarten <- lengths(intersections)\n\n# Add the count as a new column to the buffer layer\nresale_tidy_geo$num_Kindergarten_350 <- num_Kindergarten\n```\n:::\n\n\n\n### Number of bus stops within 350m\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial join to identify intersections\nintersections <- st_intersects(resale_tidy_geo_b350,Busstop)\n\n# Count the number of intersections for each buffer\n\nnum_Busstop <- lengths(intersections)\n\n# Add the count as a new column to the buffer layer\nresale_tidy_geo$num_Busstop_350 <- num_Busstop\n```\n:::\n\n\n\n### Number of Schools within 1 KM\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial join to identify intersections\nintersections <- st_intersects(resale_tidy_geo_b1km, Sch_geo)\n\n# Count the number of intersections for each buffer\nnum_Sch<- lengths(intersections)\n\n# Add the count as a new column to the buffer layer\nresale_tidy_geo$num_Sch_1km <- num_Sch\n```\n:::\n\n\n\n### Number of good primary schools within 1 km\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPop_prissch <- filter(Sch_geo, Sch_geo$`Popular School`== \"yes\")\n\n# Spatial join to identify intersections\nintersections <- st_intersects(resale_tidy_geo_b1km, Pop_prissch)\n\n# Count the number of intersections for each buffer\nnum_popSch<- lengths(intersections)\n\n# Add the count as a new column to the buffer layer\nresale_tidy_geo$num_pop_priSch_1km <- num_popSch\n```\n:::\n\n\n\n### Number of primary school within 1 km\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrisch <- filter(Sch_geo, Sch_geo$mainlevel_code == \"PRIMARY\" | \n                   Sch_geo$school_name == \"MARIS STELLA HIGH SCHOOL\")\n\n# Spatial join to identify intersections\nintersections <- st_intersects(resale_tidy_geo_b1km, Prisch)\n\n# Count the number of intersections for each buffer\nnum_Prisch<- lengths(intersections)\n\n# Add the count as a new column to the buffer layer\nresale_tidy_geo$num_Prisch <- num_Prisch\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_tidy_geo , \"data/rds/resale_tidy_geo.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo <-read_rds(\"data/rds/resale_tidy_geo.rds\")\n```\n:::\n\n\n\n### Further data processing for the data used for building the predictive model.\n\nAs mentioned in the earlier part at the start the predictive model will focus on 5-room transactions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_5Rm <-filter(resale_tidy_geo,resale_tidy_geo$flat_type == \"5 ROOM\")\n```\n:::\n\n\n\n#### Handling overlapping points:\n\nAfter filtering the 5 room flats transaction details, the following code chunk is to jitters the overlapping points. This step is carried out after all the required distances were carried out.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_5Rm<- resale_tidy_geo_5Rm %>%\n  st_jitter(amount = 5)\n```\n:::\n\n\n\nFurther handling of storey range, in the current database, it is categorical, we will need to convert it to dummy variables using the following code chunks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_unique_story_orders <- unique(resale_tidy_geo_5Rm$storey_range)\nnum_unique_story_orders\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_5Rm <- resale_tidy_geo_5Rm %>%\n  mutate(storey_order = case_when(\n    storey_range %in% c(\"01 TO 03\") ~ 1,\n    storey_range %in% c(\"04 TO 06\") ~ 2,\n    storey_range %in% c(\"07 TO 09\") ~ 3,\n    storey_range %in% c(\"10 TO 12\") ~ 4,\n    storey_range %in% c(\"13 TO 15\") ~ 5,\n    storey_range %in% c(\"16 TO 18\") ~ 6,\n    storey_range %in% c(\"19 TO 21\") ~ 7,\n    storey_range %in% c(\"22 TO 24\") ~ 8,\n    storey_range %in% c(\"25 TO 27\") ~ 9,\n    storey_range %in% c(\"28 TO 30\") ~ 10,\n   TRUE ~ 10\n  ))\n```\n:::\n\n\n\n#### Summary of the resale_tidy_geo_5Rm data\n\nThe following code block is to summarise the resale_tidy_geo_5Rm to check for data structure issues which may interfere with the predictive model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(resale_tidy_geo_5Rm)\n```\n:::\n\n\n\nThe following code chunk is to convert the data from meters to kilometers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert PROX_* variables to kilometers\nresale_tidy_geo_5Rm$PROX_Busstop <- resale_tidy_geo_5Rm$PROX_Busstop / 1000\nresale_tidy_geo_5Rm$PROX_MRT <- resale_tidy_geo_5Rm$PROX_MRT / 1000\nresale_tidy_geo_5Rm$PROX_eldercare <- resale_tidy_geo_5Rm$PROX_eldercare / 1000\nresale_tidy_geo_5Rm$PROX_Hawker <- resale_tidy_geo_5Rm$PROX_Hawker / 1000\nresale_tidy_geo_5Rm$PROX_Park <- resale_tidy_geo_5Rm$PROX_Park / 1000\nresale_tidy_geo_5Rm$PROX_Supermarket <- resale_tidy_geo_5Rm$PROX_Supermarket / 1000\nresale_tidy_geo_5Rm$PROX_OtherBusinessdistricts <- resale_tidy_geo_5Rm$PROX_OtherBusinessdistricts / 1000\nresale_tidy_geo_5Rm$PROX_CBD <- resale_tidy_geo_5Rm$PROX_CBD / 1000\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_tidy_geo_5Rm, \"data/rds/resale_tidy_geo_5Rm.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_5Rm <-read_rds(\"data/rds/resale_tidy_geo_5Rm.rds\")\n```\n:::\n\n\n\nGet the columns names of the required data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(resale_tidy_geo_5Rm)\n```\n:::\n\n\n\nAs the database still consist of other fields which will not be used in predictive model, hence they are removed to avoid issues.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dropping columns by their index\nresale_tidy_geo_5Rm_trim <- resale_tidy_geo_5Rm[, -c(1, 3:12, 14:15, 32 )]\n```\n:::\n\n\n\nAfter trimming the the data, the summary function as used again to ensure that we are able to the data are proper.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_tidy_geo_5Rm_trim, \"data/rds/resale_tidy_geo_5Rm_trim.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy_geo_5Rm_trim <-read_rds(\"data/rds/resale_tidy_geo_5Rm_trim.rds\")\nsummary (resale_tidy_geo_5Rm_trim)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    postal           resale_price     rem_lease_inMths          geometry    \n Length:10886       Min.   : 400000   Min.   : 551.0   POINT        :10886  \n Class :character   1st Qu.: 600000   1st Qu.: 821.0   epsg:3414    :    0  \n Mode  :character   Median : 665000   Median : 910.0   +proj=tmer...:    0  \n                    Mean   : 701989   Mean   : 913.1                        \n                    3rd Qu.: 760000   3rd Qu.:1052.0                        \n                    Max.   :1588000   Max.   :1145.0                        \n  PROX_Busstop        PROX_MRT       PROX_eldercare      PROX_Hawker     \n Min.   :0.01585   Min.   :0.01959   Min.   :0.000001   Min.   :0.03452  \n 1st Qu.:0.07369   1st Qu.:0.39389   1st Qu.:0.407733   1st Qu.:0.44071  \n Median :0.10637   Median :0.64467   Median :0.695586   Median :0.76166  \n Mean   :0.11563   Mean   :0.73144   Mean   :0.875661   Mean   :0.86737  \n 3rd Qu.:0.14817   3rd Qu.:0.99857   3rd Qu.:1.190987   3rd Qu.:1.15554  \n Max.   :0.36948   Max.   :2.36558   Max.   :3.282314   Max.   :2.86763  \n   PROX_Park        PROX_Supermarket      PROX_Mall     \n Min.   :0.006711   Min.   :0.0000007   Min.   :   0.0  \n 1st Qu.:0.331660   1st Qu.:0.1821765   1st Qu.: 349.6  \n Median :0.550195   Median :0.2822669   Median : 516.8  \n Mean   :0.621309   Mean   :0.3022022   Mean   : 597.5  \n 3rd Qu.:0.802742   3rd Qu.:0.3969652   3rd Qu.: 761.7  \n Max.   :2.066652   Max.   :1.4517447   Max.   :2238.2  \n PROX_OtherBusinessdistricts    PROX_CBD        num_childcare_350\n Min.   :0.0253              Min.   : 0.09263   Min.   : 0.000   \n 1st Qu.:1.6293              1st Qu.: 9.90208   1st Qu.: 3.000   \n Median :3.1223              Median :12.44247   Median : 5.000   \n Mean   :3.6114              Mean   :11.88770   Mean   : 4.886   \n 3rd Qu.:5.1547              3rd Qu.:15.02619   3rd Qu.: 6.000   \n Max.   :9.2498              Max.   :18.86054   Max.   :22.000   \n num_Kindergarten_350 num_Busstop_350   num_Sch_1km     num_pop_priSch_1km\n Min.   :0.000        Min.   : 0.000   Min.   : 0.000   Min.   :0.000     \n 1st Qu.:0.000        1st Qu.: 6.000   1st Qu.: 4.000   1st Qu.:1.000     \n Median :1.000        Median : 8.000   Median : 5.000   Median :2.000     \n Mean   :1.042        Mean   : 8.209   Mean   : 5.606   Mean   :1.542     \n 3rd Qu.:1.000        3rd Qu.:10.000   3rd Qu.: 7.000   3rd Qu.:2.000     \n Max.   :8.000        Max.   :19.000   Max.   :14.000   Max.   :6.000     \n  storey_order   \n Min.   : 1.000  \n 1st Qu.: 2.000  \n Median : 3.000  \n Mean   : 3.385  \n 3rd Qu.: 4.000  \n Max.   :10.000  \n```\n\n\n:::\n:::\n\n\n\n### Final checks on overlapping points\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- resale_tidy_geo_5Rm_trim %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n\noverlapping_Checks <- unique(overlapping_points$overlap)\noverlapping_Checks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n### Reducing the sample size to a more manageable size for model building.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nmdata <- resale_tidy_geo_5Rm_trim[sample(nrow(resale_tidy_geo_5Rm_trim), 6500, replace = TRUE), ]\n\nwrite_rds(mdata, \"data/rds/mdata.rds\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}