{
  "hash": "1eda5120d1f9b9ca141e1d2123b0a503",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 2\"\nauthor: \"Dew Stella Chan\"\nformat: html\neditor: visual\ndate: \"Septemeber 27, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\nThis page documents the codes and the analysis performed for Take Home Exercise 02.\n\nThe objectives of this exercise is to discover:\n\n-   If the key indicators of tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\nSince tourism data used in this assignment covers, Pre, During and Post COVID-19 Pandemic period, the focus of this assignments will be on the foreign tourists related indicators from 2019 to 2023.\n\n## Loading of Libraries\n\nDue to the exploration of Geo spatial techniques, more packages were loaded to facilitates the different techniques used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sp, sfdep, raster, spatstat, tmap, tidyverse, lubridate, readxl, spNetwork, plotly, tidyverse, Kendall,  knitr, spdep, patchwork)\nset.seed(1234) #set seed to ensure the result is consistent\n```\n:::\n\n\n\n## Data preparation and Transformation\n\n### Loading of Thailand - Subnational Administrative Boundaries\n\nThis assignment focuses on the analysis of tourism related on foreigners indicators on Province level of the Kingdom of Thailand.\n\nThe [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX is used for the analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\nSAB_1 = st_read(dsn = \"data\", layer = \"tha_admbnda_adm1_rtsd_20220121\")%>%\n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\dewschan\\ISSS622-GAA\\Take_home_Ex\\Take_home_02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n#### Writing and Reading the Province data to rds folder\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(SAB_1,\"data/rds/SAB_1.rds\")\n#to save the file to rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#re-reading the acc file to the environments\nSAB_1<-read_rds(\"data/rds/SAB_1.rds\")\n```\n:::\n\n\n\n### Loading and preparation of Thailand Tourism Statistics\n\nThe [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) at Kaggle is used for this analysis. This section show the code for data preparation and transformation of theThailand Toursim Statistics.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTour_data <- read_csv(\"data/thailand_domestic_tourism_2019_2023_ver2.csv\")\n```\n:::\n\n\n\nStandardizing the Province Names with the Thailand Subnational Administrative Boundaries.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTour_data <- Tour_data %>%\n  mutate(province_eng = case_when(\n    province_eng == \"Buriram\" ~ \"Buri Ram\",\n    province_eng == \"Chainat\" ~ \"Chai Nat\",\n    province_eng == \"Chonburi\" ~ \"Chon Buri\",\n    province_eng == \"Lopburi\" ~ \"Lop Buri\",\n    province_eng == \"Nong Bua Lamphu\" ~ \"Nong Bua Lam Phu\",\n    province_eng == \"Phang Nga\" ~ \"Phangnga\",\n    province_eng == \"Prachinburi\" ~ \"Prachin Buri\",\n    province_eng == \"Sisaket\" ~ \"Si Sa Ket\",\n    TRUE ~ province_eng\n  ))\n\nTour_data <-rename(Tour_data, ADM1_EN = province_eng, Date_tour = date )\n```\n:::\n\n\n\n##### Writing and Reading the data in Tourism Statistics to rds folder\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(Tour_data,\"data/rds/Tour_data.rds\")\n#to save the file to rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTour_data<-read_rds(\"data/rds/Tour_data.rds\")\n#re-reading the acc file to the environments\n```\n:::\n\n\n\n#### Data Transformation\n\nTransform tour data from long table into a table with the 8 different indicators in the variables column into individual column for data analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntour_data_wide <- pivot_wider(Tour_data, names_from = \"variable\", values_from = \"value\")\nwrite_rds(tour_data_wide,\"data/rds/tour_data_wide.rds\")\n```\n:::\n\n\n\n##### Reading the wide data in Tourism Statistics from rds folder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#re-reading the acc file to the environments\ntour_data_wide<-read_rds(\"data/rds/tour_data_wide.rds\")\n```\n:::\n\n\n\n#### Joining the aspatial long data to geospatial data:\n\nThe aspatial data was joined to geospatial data using the column named \"ADM1_EN\" which consist of the province name of the Kingdom of Thailand.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSAB1_tour_wide <- left_join(SAB_1, tour_data_wide)\nwrite_rds(SAB1_tour_wide,\"data/rds/SAB1_tour_wide.rds\")\n```\n:::\n\n\n\n##### Reading the joined aspatial and geospatial data from rds folder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSAB1_tour_wide<-read_rds(\"data/rds/SAB1_tour_wide.rds\")\n```\n:::\n\n\n\n### To derive foreign tourists related spending indicators for the study period.\n\nAs mentioned earlier, the focus of this analysis is on indicators related to the revenue generated from foreign tourism. Hence the main variables used for this analysis are:\n\n-   Total revenue generated from Foreign Tourists (Sum of Revenue_foreign ) from the Period of 2019 to 2023 by provinces.\n\n-   Total number of foreign tourists (sum of no_tourist_foreign) from the Period of 2019 to 2023 by provinces.\n\n-   Amount of Revenue generated by per Tourist (Amt_rev_per_for_tourist). This indicator is derived using the above using above two indicators, sum of Revenue_foreign divided by sum of no_tourist_foreign. This indicator will highlight the provinces are attracting foreign tourists with higher spending power.\n\n    The 3rd indicator is important for policy planning. In the context of the COVID-19, it is important for policy maker to be aware of the the province with higher spending foreign tourist. The Thai government can use this findings to isolate the area of Thailand to open up for foreign tourists and implement movement restriction measures if there is another pandemic were to occur. This will help policy measures to plan and develop plans to mitigate the impact of the pandemic on the economy and perform long term planning for a more pandemic resistance tourism industry in Thailand.\n\nThe following code chunks is to derive the indicators as described above and join them to the province layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_for_prov<- tour_data_wide %>%\n  group_by(ADM1_EN) %>%\n  summarize(total_for_revenue = sum(revenue_foreign), total_no_for_tourist= sum(no_tourist_foreign))%>%\n  mutate(Amt_rev_per_for_tourist= (total_for_revenue /total_no_for_tourist))\n\nwrite_rds(total_for_prov,\"data/rds/total_for_prov.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSAB_1_total_for_prov<- left_join(SAB_1, total_for_prov)\nwrite_rds(SAB_1_total_for_prov,\"data/rds/SAB_1_total_for_prov.rds\")\n```\n:::\n\n\n\nTo read the joined data from SAB_1 layer rds folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSAB_1_total_for_prov<-read_rds(\"data/rds/SAB_1_total_for_prov.rds\")\n```\n:::\n\n\n\n##### Preparation Thai_total_for_prov layer and writing it to rds folder.\n\nThe following code is to trim layer to only the required columns for analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_total_for_prov <- subset(SAB_1_total_for_prov , \n                              select = c(\"Shape_Leng\", \"Shape_Area\", \n                                        \"ADM1_EN\",\"date\", \"total_for_revenue\", \n                                        \"total_no_for_tourist\",\n                                        \"Amt_rev_per_for_tourist\", \"geometry\"))\nwrite_rds(Thai_total_for_prov,\"data/rds/Thai_total_for_prov.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_total_for_prov<-read_rds(\"data/rds/Thai_total_for_prov.rds\")\n```\n:::\n\n\n\n## Visualising Foreign Tourists Indicators for year 2019 to 2023\n\nThe following code chunks are to generate visualise indicators using Tmap function by the equal interval and equal quantile method.\n\n#### Total revenue from foreign tourists.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the map\n#| fig-width: 12 #to widen the space\n#| fig-height: 8 #to lengthen the graph.\ntmap_mode(\"plot\")\nequal_TotRev <- tm_shape(Thai_total_for_prov) +\n  tm_fill(\"total_for_revenue\",\n           style = \"quantile\",\n           palette = \"Blues\",\n           title = \"Total Revenue From \\n Foreign Tourists\") +\n  tm_layout(main.title = \"Equal Quantile Distribution of \\n Total Revenue from Foreign Tourists by Provinces 2019 to 2023\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.4,\n            legend.width = 0.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\nquantile_TotRev<- tm_shape(Thai_total_for_prov) +\n  tm_fill(\"total_for_revenue\",\n           style = \"equal\",\n           palette = \"Blues\",\n           title = \"Total Revenue From \\n Foreign Tourists\") +\n  tm_layout(main.title = \"Equal Interval Distribution of \\n Total Revenue from Foreign Tourists by Provinces 2019 to 2023\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.4,\n            legend.width = 0.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\ntmap_arrange(equal_TotRev, \n             quantile_TotRev, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the map\n#| fig-width: 12 #to widen the space\n#| fig-height: 8 #to lengthen the graph.\ntmap_mode(\"plot\")\nequal_nofor <- tm_shape(Thai_total_for_prov) +\n  tm_fill(\"total_no_for_tourist\",\n           style = \"quantile\",\n           palette = \"Blues\",\n           title = \"Total No. of Foreign Tourist\") +\n  tm_layout(main.title = \"Equal Quantile Distribution of Total No. of Foreign Tourist by \\n Provinces 2019 to 2023\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.4,\n            legend.width = 0.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\nquantil_nofor<- tm_shape(Thai_total_for_prov) +\n  tm_fill(\"total_no_for_tourist\",\n           style = \"equal\",\n           palette = \"Blues\",\n           title = \"Total no. of Foreign Tourist\") +\n  tm_layout(main.title = \"Equal Interval of Total No. of Foreign Tourist by \\n Provinces 2019 to 2023\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.4,\n            legend.width = 0.4,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\ntmap_arrange(equal_nofor, \n             quantil_nofor, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n### Amount of Revenue per Foreign Tourist\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the map\n#| fig-width: 12 #to widen the space\n#| fig-height: 8 #to lengthen the graph.\ntmap_mode(\"plot\")\nequal_Amt <- tm_shape(Thai_total_for_prov) +\n  tm_fill(\"Amt_rev_per_for_tourist\",\n           style = \"quantile\",\n           palette = \"Blues\",\n           title = \"Amount of reveune per foreign Tourist\") +\n  tm_layout(main.title = \"Equal Quantile Distribution of \\n Amount of reveune per Foreign Tourist by Provinces 2019 to 2023\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\nquantil_Amt<- tm_shape(Thai_total_for_prov) +\n  tm_fill(\"Amt_rev_per_for_tourist\",\n           style = \"equal\",\n           palette = \"Blues\",\n           title = \"Amount of reveune per foreign Tourist\") +\n  tm_layout(main.title = \"Equal Interval of Amount of reveune \\n per Foreign Tourist by Provinces 2019 to 2023\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\ntmap_arrange(equal_Amt, \n             quantil_Amt, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Analyising if Tourist hotspot is related to space\n\nWe will start by analysing if the tourist hot-spots are related spatially.\n\nGiven that Phunket is an offshore island and has the one of the top 3 provinces in terms of total reveune from foreign tourists, hence contiguity matrix will not be suitable, we will need to use distance based matrix.\n\nThe following code chunk is to print the top 3 provinces with the highest revenue generated from the foreign tourists, highest number of foreign tourists and the highes amount of revune per foreign tourist for the period from 2019 to 2023.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_3_revenue <- Thai_total_for_prov %>%\n  arrange(desc(total_for_revenue)) %>%\n  head(3)\n\ntop_3_tourists <- Thai_total_for_prov %>%\n  arrange(desc(total_no_for_tourist)) %>%\n  head(3)\n\ntop_3_revenue_per_tourist <- Thai_total_for_prov %>%\n  arrange(desc(Amt_rev_per_for_tourist)) %>%\n  head(3)\n\nprint(top_3_revenue)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 418207.3 ymin: 826705.1 xmax: 794817.5 ymax: 1543363\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area   ADM1_EN       date total_for_revenue\n1   2.417227 0.13133873   Bangkok 2019-02-18      1.106223e+12\n2   2.920196 0.04494432    Phuket 2019-02-18      7.315906e+11\n3   6.091786 0.37563008 Chon Buri 2019-02-18      2.999981e+11\n  total_no_for_tourist Amt_rev_per_for_tourist                       geometry\n1             44452634                24885.43 MULTIPOLYGON (((674339.8 15...\n2             17525594                41744.13 MULTIPOLYGON (((424349 8267...\n3             14660424                20463.13 MULTIPOLYGON (((714273.8 13...\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(top_3_tourists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 418207.3 ymin: 826705.1 xmax: 794817.5 ymax: 1543363\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area   ADM1_EN       date total_for_revenue\n1   2.417227 0.13133873   Bangkok 2019-02-18      1.106223e+12\n2   2.920196 0.04494432    Phuket 2019-02-18      7.315906e+11\n3   6.091786 0.37563008 Chon Buri 2019-02-18      2.999981e+11\n  total_no_for_tourist Amt_rev_per_for_tourist                       geometry\n1             44452634                24885.43 MULTIPOLYGON (((674339.8 15...\n2             17525594                41744.13 MULTIPOLYGON (((424349 8267...\n3             14660424                20463.13 MULTIPOLYGON (((714273.8 13...\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(top_3_revenue_per_tourist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 418207.3 ymin: 826705.1 xmax: 794817.5 ymax: 1543363\nProjected CRS: WGS 84 / UTM zone 47N\n  Shape_Leng Shape_Area   ADM1_EN       date total_for_revenue\n1   2.920196 0.04494432    Phuket 2019-02-18      7.315906e+11\n2   2.417227 0.13133873   Bangkok 2019-02-18      1.106223e+12\n3   6.091786 0.37563008 Chon Buri 2019-02-18      2.999981e+11\n  total_no_for_tourist Amt_rev_per_for_tourist                       geometry\n1             17525594                41744.13 MULTIPOLYGON (((424349 8267...\n2             44452634                24885.43 MULTIPOLYGON (((674339.8 15...\n3             14660424                20463.13 MULTIPOLYGON (((714273.8 13...\n```\n\n\n:::\n:::\n\n\n\n## Exploratory Spatial Data Analysis:\n\nFor this assignment, we will be focusing of using distance weight matrix. This is used due to there are many islands in Thailand being the tourist hot-spots.\n\n### Fixed Distance weight Matrix\n\nThe following code chunk is to derive the spatial weight using distance based weight matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming Thai_total_for_pro has a geometry column in a projected CRS\nThai_total_for_prov <- st_transform(Thai_total_for_prov, crs = 4326) # WGS84 CRS\n\nlongitude <- map_dbl(Thai_total_for_prov$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(Thai_total_for_prov$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,]  100.6235 13.77183\n[2,]  100.7102 13.59651\n[3,]  100.3928 13.92416\n[4,]  100.6824 14.06513\n[5,]  100.5266 14.34535\n[6,]  100.3485 14.62354\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   51.92   64.33   63.24   76.77  110.94 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_total_for_prov$ADM1_EN[match(max(k1dists), k1dists)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Prachuap Khiri Khan\"\n```\n\n\n:::\n:::\n\n\n\nSince the maximum distance for the distance from one province to another is at 110.94, we will use 111 to build the fixed distance matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Based on the max distance from the fix distance neighbour \nwm_d111 <- dnearneigh(coords, 0, 111, longlat = TRUE) \nwm_d111\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 350 \nPercentage nonzero weights: 5.903188 \nAverage number of links: 4.545455 \n2 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(wm_d111)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 77\n $ : int [1:12] 2 3 4 5 6 10 11 15 17 59 ...\n $ : int [1:10] 1 3 4 5 11 15 17 59 60 61\n $ : int [1:13] 1 2 4 5 6 8 10 17 56 58 ...\n $ : int [1:14] 1 2 3 5 6 8 10 15 16 17 ...\n $ : int [1:13] 1 2 3 4 6 7 8 9 10 17 ...\n $ : int [1:11] 1 3 4 5 7 8 9 10 17 58 ...\n $ : int [1:7] 5 6 8 9 10 17 48\n $ : int [1:10] 3 4 5 6 7 9 10 48 49 58\n $ : int [1:7] 5 6 7 8 48 49 58\n $ : int [1:9] 1 3 4 5 6 7 8 16 17\n $ : int [1:6] 1 2 12 13 15 16\n $ : int [1:3] 11 13 15\n $ : int [1:5] 11 12 14 15 18\n $ : int 13\n $ : int [1:9] 1 2 4 11 12 13 16 17 18\n $ : int [1:6] 4 10 11 15 17 18\n $ : int [1:10] 1 2 3 4 5 6 7 10 15 16\n $ : int [1:3] 13 15 16\n $ : int 20\n $ : int [1:2] 19 21\n $ : int [1:2] 20 22\n $ : int [1:2] 21 23\n $ : int [1:2] 22 26\n $ : int [1:3] 26 34 38\n $ : int [1:2] 29 55\n $ : int [1:4] 23 24 34 38\n $ : int [1:2] 32 36\n $ : int [1:4] 29 30 31 32\n $ : int [1:3] 25 28 33\n $ : int [1:3] 28 32 36\n $ : int 28\n $ : int [1:3] 27 28 30\n $ : int [1:3] 29 34 35\n $ : int [1:5] 24 26 33 35 38\n $ : int [1:4] 33 34 36 38\n $ : int [1:4] 27 30 35 37\n $ : int [1:2] 36 38\n $ : int [1:5] 24 26 34 35 37\n $ : int [1:3] 40 41 47\n $ : int [1:2] 39 41\n $ : int [1:3] 39 40 43\n $ : int [1:3] 43 52 53\n $ : int [1:4] 41 42 44 52\n $ : int [1:2] 43 45\n $ : int [1:2] 44 46\n $ : int 45\n $ : int 39\n $ : int [1:6] 7 8 9 49 50 54\n $ : int [1:6] 8 9 48 50 57 58\n $ : int [1:5] 48 49 51 52 54\n $ : int 50\n $ : int [1:4] 42 43 50 53\n $ : int [1:4] 42 52 54 55\n $ : int [1:4] 48 50 53 55\n $ : int [1:3] 25 53 54\n $ : int [1:5] 3 59 60 61 62\n $ : int [1:2] 49 58\n $ : int [1:9] 3 4 5 6 8 9 49 57 59\n $ : int [1:10] 1 2 3 4 5 6 56 58 60 61\n $ : int [1:9] 1 2 3 4 5 56 59 61 62\n $ : int [1:8] 1 2 3 4 56 59 60 62\n $ : int [1:4] 56 60 61 63\n $ : int 62\n $ : int [1:4] 65 68 73 74\n $ : int [1:5] 64 66 67 68 73\n $ : int [1:3] 65 67 68\n $ : int [1:2] 65 66\n $ : int [1:4] 64 65 66 69\n $ : int [1:2] 68 70\n $ : int 69\n $ : int [1:3] 72 74 75\n $ : int [1:3] 71 73 74\n $ : int [1:4] 64 65 72 74\n $ : int [1:4] 64 71 72 73\n $ : int [1:3] 71 76 77\n $ : int [1:2] 75 77\n $ : int [1:2] 75 76\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:77] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 111, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 111\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(Thai_total_for_prov$ADM1_EN, card(wm_d111))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          \n                           1 2 3 4 5 6 7 8 9 10 11 12 13 14\n  Amnat Charoen            0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Ang Thong                0 0 0 0 0 0 0 0 0  0  1  0  0  0\n  Bangkok                  0 0 0 0 0 0 0 0 0  0  0  1  0  0\n  Bueng Kan                0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Buri Ram                 0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Chachoengsao             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Chai Nat                 0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Chaiyaphum               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Chanthaburi              0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Chiang Mai               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Chiang Rai               1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Chon Buri                0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Chumphon                 1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Kalasin                  0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Kamphaeng Phet           0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Kanchanaburi             0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Khon Kaen                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Krabi                    0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Lampang                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Lamphun                  0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Loei                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Lop Buri                 0 0 0 0 0 0 1 0 0  0  0  0  0  0\n  Mae Hong Son             1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Maha Sarakham            0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Mukdahan                 0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Nakhon Nayok             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Pathom            0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Nakhon Phanom            0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Ratchasima        1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Nakhon Sawan             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Nakhon Si Thammarat      0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nan                      0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Narathiwat               0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Nong Bua Lam Phu         0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Nong Khai                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Nonthaburi               0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Pathum Thani             0 0 0 0 0 0 0 0 0  0  0  0  0  1\n  Pattani                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phangnga                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phatthalung              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phayao                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Phetchabun               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Phetchaburi              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phichit                  0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phitsanulok              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phra Nakhon Si Ayutthaya 0 0 0 0 0 0 0 0 0  0  0  0  1  0\n  Phrae                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Phuket                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Prachin Buri             0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Prachuap Khiri Khan      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ranong                   0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Ratchaburi               0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Rayong                   0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Roi Et                   0 0 0 0 1 0 0 0 0  0  0  0  0  0\n  Sa Kaeo                  0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Sakon Nakhon             0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Samut Prakan             0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Samut Sakhon             0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Samut Songkhram          0 0 0 0 0 0 0 1 0  0  0  0  0  0\n  Saraburi                 0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Satun                    0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Si Sa Ket                0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Sing Buri                0 0 0 0 0 0 0 0 0  1  0  0  0  0\n  Songkhla                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Sukhothai                0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Suphan Buri              0 0 0 0 0 0 0 0 1  0  0  0  0  0\n  Surat Thani              0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Surin                    0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Tak                      1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Trang                    0 0 0 1 0 0 0 0 0  0  0  0  0  0\n  Trat                     1 0 0 0 0 0 0 0 0  0  0  0  0  0\n  Ubon Ratchathani         0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Udon Thani               0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Uthai Thani              0 0 0 0 0 1 0 0 0  0  0  0  0  0\n  Uttaradit                0 0 1 0 0 0 0 0 0  0  0  0  0  0\n  Yala                     0 1 0 0 0 0 0 0 0  0  0  0  0  0\n  Yasothon                 0 0 1 0 0 0 0 0 0  0  0  0  0  0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp <- n.comp.nb(wm_d111)\nn_comp$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n_comp$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2 \n63 14 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(Thai_total_for_prov$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(Thai_total_for_prov$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d111, coords, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n#### Observations from the fixed distance matrix.\n\nBased on the outputs generated by fixed distance matrix, it is observed that the fixed distance matrix will generate a number of 7 provinces with only 1 neighbour, this is not ideal. Hence adaptive distance matrix is built.\n\n### Adaptive Distanace weight matrix\n\nThe following codes are to build the adaptive distance weight matrix, Examining if Adaptive distance weight matrix will be more suitable for the Analysis. Hence similar to the hands on exercise, we will use 6 nearest neighbours.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 462 \nPercentage nonzero weights: 7.792208 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 77\n $ : int [1:6] 2 3 4 5 59 60\n $ : int [1:6] 1 3 4 11 59 60\n $ : int [1:6] 1 2 4 5 59 60\n $ : int [1:6] 1 2 3 5 17 59\n $ : int [1:6] 1 3 4 6 8 10\n $ : int [1:6] 4 5 8 9 10 58\n $ : int [1:6] 5 6 8 9 10 17\n $ : int [1:6] 5 6 7 9 10 58\n $ : int [1:6] 6 7 8 48 49 58\n $ : int [1:6] 4 5 6 7 8 17\n $ : int [1:6] 1 2 12 13 15 16\n $ : int [1:6] 2 11 13 14 15 16\n $ : int [1:6] 11 12 14 15 16 18\n $ : int [1:6] 11 12 13 15 16 18\n $ : int [1:6] 1 2 11 12 16 17\n $ : int [1:6] 4 10 11 15 17 18\n $ : int [1:6] 1 4 5 10 15 16\n $ : int [1:6] 13 15 16 17 19 20\n $ : int [1:6] 10 16 17 18 20 25\n $ : int [1:6] 18 19 21 22 33 34\n $ : int [1:6] 20 22 24 26 33 34\n $ : int [1:6] 20 21 23 24 26 34\n $ : int [1:6] 21 22 24 26 34 38\n $ : int [1:6] 22 23 26 34 35 38\n $ : int [1:6] 7 19 28 29 33 55\n $ : int [1:6] 22 23 24 34 35 38\n $ : int [1:6] 28 30 32 35 36 37\n $ : int [1:6] 25 29 30 31 32 35\n $ : int [1:6] 25 28 30 33 34 35\n $ : int [1:6] 27 28 29 32 35 36\n $ : int [1:6] 28 30 32 42 53 55\n $ : int [1:6] 27 28 30 31 35 36\n $ : int [1:6] 20 21 24 29 34 35\n $ : int [1:6] 21 24 26 33 35 38\n $ : int [1:6] 24 29 33 34 36 38\n $ : int [1:6] 27 30 32 35 37 38\n $ : int [1:6] 24 26 27 35 36 38\n $ : int [1:6] 24 26 34 35 36 37\n $ : int [1:6] 40 41 43 45 46 47\n $ : int [1:6] 39 41 43 47 51 52\n $ : int [1:6] 39 40 42 43 45 52\n $ : int [1:6] 31 41 43 44 52 53\n $ : int [1:6] 40 41 42 44 45 52\n $ : int [1:6] 31 41 42 43 45 46\n $ : int [1:6] 39 41 42 43 44 46\n $ : int [1:6] 39 40 41 43 44 45\n $ : int [1:6] 39 40 41 43 45 46\n $ : int [1:6] 7 8 9 49 50 54\n $ : int [1:6] 8 9 48 50 57 58\n $ : int [1:6] 48 49 51 52 53 54\n $ : int [1:6] 40 48 49 50 52 54\n $ : int [1:6] 41 42 43 50 51 53\n $ : int [1:6] 31 42 50 52 54 55\n $ : int [1:6] 9 48 50 52 53 55\n $ : int [1:6] 7 25 31 48 53 54\n $ : int [1:6] 1 3 59 60 61 62\n $ : int [1:6] 6 9 49 56 58 59\n $ : int [1:6] 5 6 8 9 49 59\n $ : int [1:6] 1 3 4 5 60 61\n $ : int [1:6] 1 2 3 56 59 61\n $ : int [1:6] 1 3 56 59 60 62\n $ : int [1:6] 3 56 59 60 61 63\n $ : int [1:6] 2 56 60 61 62 70\n $ : int [1:6] 65 66 67 68 73 74\n $ : int [1:6] 64 66 67 68 73 74\n $ : int [1:6] 64 65 67 68 69 73\n $ : int [1:6] 64 65 66 68 73 74\n $ : int [1:6] 64 65 66 67 69 70\n $ : int [1:6] 64 65 66 67 68 70\n $ : int [1:6] 63 64 65 66 68 69\n $ : int [1:6] 72 73 74 75 76 77\n $ : int [1:6] 64 71 73 74 75 76\n $ : int [1:6] 64 65 67 71 72 74\n $ : int [1:6] 64 65 71 72 73 75\n $ : int [1:6] 71 72 73 74 76 77\n $ : int [1:6] 71 72 73 74 75 77\n $ : int [1:6] 71 72 73 74 75 76\n - attr(*, \"region.id\")= chr [1:77] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n```\n\n\n:::\n:::\n\n\n\n### Plotting Adaptive Distance-based Neighbours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(Thai_total_for_prov$geometry, border=\"lightgrey\",main=\"6 nearest neighbours\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\nplot(Thai_total_for_prov$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d111, coords, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n#### Observations from the fixed distance matrix.\n\nIt is noted that the adaptive distance matrix maybe more suitable for this analysis due to standardization of neighbours, given there are many islands in Thailand and geographical layout of Thailand.\n\nAs part of the exploration, the row standardized weights matrix, were built using the both adaptive and fixed distance martix.\n\n### Row-Standardised Weights martix\n\n#### Using fixed distance martix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_d111 <- nb2listw(wm_d111, style=\"W\", zero.policy = TRUE)\nrswm_d111\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 350 \nPercentage nonzero weights: 5.903188 \nAverage number of links: 4.545455 \n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 77 5929 77 49.37234 320.9424\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_d111$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n```\n\n\n:::\n:::\n\n\n\n#### Using adaoptive distance martix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_knn6 <- nb2listw(knn6, style=\"W\", zero.policy = TRUE)\nrswm_knn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 462 \nPercentage nonzero weights: 7.792208 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 77 5929 77 22.77778 319.4444\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_knn6$weights[10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n```\n\n\n:::\n:::\n\n\n\n## Spatial lag with row-standardized weights\n\nFinally, we’ll compute the average neighbor values for the 3 foreign tourist indicators for each polygon. These values are often referred to as spatially lagged values. As discussed in the earlier session, we will be creating using the adaptive distance matrix, hence rswm_knn6 will be used.\n\nThis section, we will be deriving the row standadised weight matrix for each indicators.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTotal_rev.lag <- lag.listw(rswm_knn6, Thai_total_for_prov$total_for_revenue)\nTotal_rev.lag\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   2632245700 234844619033 186852994917 186759552700 184834014117\n [6]   1656020000   1405093667   1411425333     68396667   1634931333\n[11] 186485341667  52891616667  53162270000  51428566667 236382986667\n[16]  50479650000 186110098333    542488333    371410333    435401667\n[21]    104560000    246893333    166201667    269321667    400613333\n[26]    271233333    709568333    780531667    316098333    468840000\n[31]    891513333    347095000    205848333    162133333    225955000\n[36]    813895000    142653333     87833333   2909921667  12347825000\n[41]  11684091667    753618333    548273333   2378015000  13625095000\n[46]  11561738333  13642661667     40811667    588846667    573758333\n[51]    379753333    457740000    409405000    586491667    272226667\n[56] 185588416033    142260250   1404896917 186144302117 185488927700\n[61] 185608924367   3300536033   2028108333 165495163333 150208280000\n[66] 155790093333  43641733333 147462251667 165331390000  46352168333\n[71]   1736048333   9136983333 145637320000  24073928333   9763171667\n[76]   9126200000   9280406667\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnb1 <- knn6[[1]]\nnb1 <- Thai_total_for_prov$total_for_revenue[nb1]\nnb1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4971250000  898464700 1569688000 7975590000  358861500   19620000\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list <- list(Thai_total_for_prov$ADM1_EN, lag.listw(rswm_knn6, Thai_total_for_prov$total_for_revenue))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"ADM1_EN\", \"lag.total_for_revenue\")\nThai_total_for_prov<- left_join(Thai_total_for_prov,lag.res)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list <- list(Thai_total_for_prov$ADM1_EN, lag.listw(rswm_knn6,Thai_total_for_prov$total_no_for_tourist))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"ADM1_EN\", \"lag.total_no_for_tourist\")\nThai_total_for_prov<- left_join(Thai_total_for_prov,lag.res)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlag.list <- list(Thai_total_for_prov$ADM1_EN, lag.listw(rswm_knn6,Thai_total_for_prov$Amt_rev_per_for_tourist))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"ADM1_EN\", \"lag.Amt_rev_per_for_tourist\")\nThai_total_for_prov<- left_join(Thai_total_for_prov,lag.res)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Thai_total_for_prov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 100.1913 ymin: 13.47842 xmax: 100.9639 ymax: 14.80246\nGeodetic CRS:  WGS 84\n  Shape_Leng Shape_Area                  ADM1_EN       date total_for_revenue\n1   2.417227 0.13133873                  Bangkok 2019-02-18      1.106223e+12\n2   1.695100 0.07926199             Samut Prakan 2019-02-18      4.971250e+09\n3   1.251111 0.05323766               Nonthaburi 2019-02-18      8.984647e+08\n4   1.884945 0.12698345             Pathum Thani 2019-02-18      1.569688e+09\n5   3.041716 0.21393797 Phra Nakhon Si Ayutthaya 2019-02-18      7.975590e+09\n6   1.739908 0.07920961                Ang Thong 2019-02-18      4.717000e+07\n  total_no_for_tourist Amt_rev_per_for_tourist lag.total_for_revenue\n1             44452634               24885.431            2632245700\n2              2183088                2277.164          234844619033\n3               403338                2227.573          186852994917\n4               750370                2091.885          186759552700\n5              2961839                2692.783          184834014117\n6                42073                1121.147            1656020000\n  lag.total_no_for_tourist lag.Amt_rev_per_for_tourist\n1                1080228.0                    2205.005\n2               10074916.5                    8934.774\n3                8421777.3                    5981.315\n4                8368454.0                    6270.697\n5                7631444.5                    5676.711\n6                 653539.7                    1976.673\n                        geometry\n1 MULTIPOLYGON (((100.6139 13...\n2 MULTIPOLYGON (((100.7306 13...\n3 MULTIPOLYGON (((100.3415 14...\n4 MULTIPOLYGON (((100.8916 14...\n5 MULTIPOLYGON (((100.5131 14...\n6 MULTIPOLYGON (((100.3332 14...\n```\n\n\n:::\n:::\n\n\n\nAfter deriving the spatial lag indicators, the following code chunks is to plot them to view the differences between them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTotal_no <- qtm(Thai_total_for_prov, \"total_no_for_tourist\")\nlag_no <- qtm(Thai_total_for_prov, \"lag.total_no_for_tourist\")\ntmap_arrange(Total_no , lag_no, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\namt <- qtm(Thai_total_for_prov, \"Amt_rev_per_for_tourist\")\nlag_amt <- qtm(Thai_total_for_prov, \"lag.Amt_rev_per_for_tourist\")\ntmap_arrange(amt, lag_amt, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTotal_rev <- qtm(Thai_total_for_prov, \"total_for_revenue\")\nlag_Total_rev <- qtm(Thai_total_for_prov, \"lag.total_for_revenue\")\ntmap_arrange(Total_rev, lag_Total_rev, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n##Computing Global Spatial Autocorrelation Statistics\n\nNext we will be carrying out test to find if there is any spatial correlation in the tourist hot-spots.\n\n-   H0: Observed spatial patterns of values is equally, data is randomly disbursed and no spatial pattern\n\n-   H1: Data is more spatially clustered.\n\n### Computing Global Moran’ I\n\nMoran’s I statistical test was performed by using moran.test() of spdep. Moran’s I describe how features differ from the values in the study area as a whole. The Moran I statistic ranges from -1 to 1. If the Moran I is:\n\n-   positive (I \\>0): Clustered, observations tend to be similar\n\n-   negative (I \\<0): Disperse, observations tend to be dissimilar\n\n-   approximately or near to zero: observations arranged randomly over space\n\n#### Total Revenue from Foreign Tourist.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Thai_total_for_prov$total_for_revenue, \n           listw=rswm_knn6, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Thai_total_for_prov$total_for_revenue  \nweights: rswm_knn6    \n\nMoran I statistic standard deviate = 0.50503, p-value = 0.3068\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.008385629      -0.013157895       0.001819717 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm_tot = moran.mc(Thai_total_for_prov$total_for_revenue, \n         listw = rswm_knn6,\n         nsim = 99,\n         zero.policy = TRUE,\n         na.action = na.omit)\nbperm_tot\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Thai_total_for_prov$total_for_revenue \nweights: rswm_knn6  \nnumber of simulations + 1: 100 \n\nstatistic = 0.0083856, observed rank = 83, p-value = 0.17\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n#### Observation on the global Moran test for total revenue generated from foreign tourists\n\nThe statistical report on shows that the p-value is larger than alpha value of 0.05. Hence, we don't have statistical evidence to reject the null hypothesis that the spatial distribution of total foreign spending in Thailand may resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is close 0. We can infer that the spatial distribution shows sign of randomness and is not related to spatial.\n\n#### Total number of foreign tourist\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Thai_total_for_prov$total_no_for_tourist, \n           listw=rswm_knn6, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Thai_total_for_prov$total_no_for_tourist  \nweights: rswm_knn6    \n\nMoran I statistic standard deviate = 1.3917, p-value = 0.08201\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.040939058      -0.013157895       0.001511068 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm_noFor = moran.mc(Thai_total_for_prov$total_no_for_tourist, \n         listw = rswm_knn6,\n         nsim = 99,\n         zero.policy = TRUE,\n         na.action = na.omit)\nbperm_noFor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Thai_total_for_prov$total_no_for_tourist \nweights: rswm_knn6  \nnumber of simulations + 1: 100 \n\nstatistic = 0.040939, observed rank = 91, p-value = 0.09\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n#### Observation on the global Moran test for total number of foreign tourist.\n\nThe statistical report on shows that the p-value is larger than alpha value of 0.05. Hence, we don't have statistical evidence to reject the null hypothesis that the spatial distribution of total number of foreign tourists in Thailand may resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is close 0. We can infer that the spatial distribution shows sign of randomness and is not related to spatial\n\n#### Amount of spending per foreign tourist\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Thai_total_for_prov$Amt_rev_per_for_tourist, \n           listw=rswm_knn6, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Thai_total_for_prov$Amt_rev_per_for_tourist  \nweights: rswm_knn6    \n\nMoran I statistic standard deviate = 4.9032, p-value = 4.713e-07\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.24538650       -0.01315789        0.00278038 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm_Amt = moran.mc(Thai_total_for_prov$Amt_rev_per_for_tourist, \n         listw = rswm_knn6,\n         nsim = 99,\n         zero.policy = TRUE,\n         na.action = na.omit)\nbperm_Amt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Thai_total_for_prov$Amt_rev_per_for_tourist \nweights: rswm_knn6  \nnumber of simulations + 1: 100 \n\nstatistic = 0.24539, observed rank = 99, p-value = 0.01\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n#### Observation on the global Moran test for the amount of spending per foreign tourist\n\nGiven the p-value is less than alpha at 0.05, we have statistical evidence to reject the null hypothesis. The Moran's I statistic of 0.248 suggests a moderate positive spatial autocorrelation. This means that provinces in Thailand with higher revenue per tourist tend have be close together. However given the statistic is less than 0.5, this show that the spatial autocorrelation is not strong.\n\n#### Histogram for on Global Moran Simulation for the amount of revenue generated by foreign tourist.\n\nGiven that only amount generated per foreign tourist has statistically significant results from the statistical test from global Moran I test, only the Monte-Carlo simulation will be plotted in histogram.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(bperm_Amt$res)\ncolnames(df) <- c(\"Simulated Moran's I\")\n\nmoran_amt <- ggplot(df, aes(x=`Simulated Moran's I`)) + \n  geom_histogram(color = \"black\", fill = \"grey\", bins = 25) +\n  xlim(-0.1,0.6) + \n  ylab('Frequency') + \n  geom_vline(xintercept = 0, color = 'red') +\n  geom_vline(xintercept =  0.24538650  , color = 'blue') + \n  ggtitle(\"Histogram of Monte Carlo Simulated \\nMoran's I (Amount Spent per foreign tourist)\") +\n  theme(plot.title = element_text(size = 10, hjust = 0.5)) +\n  annotate(\"text\", x = 0.35, y = 50, label = \"Actual Moran's I\", color = 'blue') \n\nmoran_amt\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\n### Geary's C Test\n\n-   Large (c\\>1): Dispersed, observations tend to be dissimilar\n\n-   Small (c\\<1): Clustered, observations tend to be similar\n\n-   c near 1 1: observations are randomly over space\n\n#### Total Revenue from Foreign Tourist.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Thai_total_for_prov$total_for_revenue, listw = rswm_knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Thai_total_for_prov$total_for_revenue \nweights: rswm_knn6   \n\nGeary C statistic standard deviate = -1.7145, p-value = 0.9568\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.24304833        1.00000000        0.02009688 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Thai_total_for_prov$total_no_for_tourist, listw = rswm_knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Thai_total_for_prov$total_no_for_tourist \nweights: rswm_knn6   \n\nGeary C statistic standard deviate = -1.6758, p-value = 0.9531\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.25431950        1.00000000        0.02303206 \n```\n\n\n:::\n:::\n\n\n\n#### Amount of spending per foreign tourist\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Thai_total_for_prov$Amt_rev_per_for_tourist, listw = rswm_knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Thai_total_for_prov$Amt_rev_per_for_tourist \nweights: rswm_knn6   \n\nGeary C statistic standard deviate = 1.9447, p-value = 0.0259\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.79639732        1.00000000        0.01096118 \n```\n\n\n:::\n:::\n\n\n\n**Computing Monte Carlo Geary’s C**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm_G_Amt = geary.mc(Thai_total_for_prov$Amt_rev_per_for_tourist,\n                 listw = rswm_knn6,\n                 nsim = 99)\nbperm_G_Amt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Thai_total_for_prov$Amt_rev_per_for_tourist \nweights: rswm_knn6  \nnumber of simulations + 1: 100 \n\nstatistic = 0.7964, observed rank = 1, p-value = 0.01\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n#### Observation from **Geary’s C for Amount Spent per Foreign Tourists**\n\nGiven the p-value is less than alpha at 0.05, we have statistical evidence to reject the null hypothesis. The Geary’'s C' statistic of 0.248 suggests a moderate spatial autocorrelation. This means that provinces in Thailand with higher revenue per tourist tend have be close together. However given the statistic is less than 0.5, this show that the spatial autocorrelation is not strong.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran_corr_Amt<- sp.correlogram(knn6, #non-weighted spatial weights\n                          Thai_total_for_prov$Amt_rev_per_for_tourist,\n                          order = 6,\n                          method = 'I', #Moran's I\n                          style = 'W') #weighed\nplot(moran_corr_Amt)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n\n```{.r .cell-code}\nprint(moran_corr_Amt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for Thai_total_for_prov$Amt_rev_per_for_tourist \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (77)  0.2453865  -0.0131579  0.0027804           4.9032       9.427e-07 ***\n2 (77)  0.0738698  -0.0131579  0.0020621           1.9165         0.05531 .  \n3 (77)  0.0477061  -0.0131579  0.0019047           1.3946         0.16314    \n4 (77) -0.0017183  -0.0131579  0.0017711           0.2718         0.78576    \n5 (77)  0.0487384  -0.0131579  0.0016770           1.5115         0.13067    \n6 (77) -0.0481046  -0.0131579  0.0015967          -0.8746         0.38180    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\nFrom the output, we can see that the amount of revenue per tourists is not spatially correlated. you can see that there is no standard trend as the spatial lags increases beyond 6. Due to the time limit of the assignment, I am unable to try if the results will improve if I were to change the adaptative matrix from 6 to 4.\n\n### Computing local Moran’s I\n\nNext we will compute the local Moran's I, using the localmoran() function of spdep package.Due to the time constraints, the indicators to focus on will be the Amount of revenue per foreign tourist, given that the Global Moran test has shown significant results, however it is important to note that it is still possible that there are local spatial correlations for the other two indicators.\n\n#### Amount of revenue per foreign tourits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips_amt <- order(Thai_total_for_prov$Amt_rev_per_for_tourist)\nlocalMI_amt <- localmoran(Thai_total_for_prov$Amt_rev_per_for_tourist, rswm_knn6)\nhead(localMI_amt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii         E.Ii     Var.Ii       Z.Ii Pr(z != E(Ii))\n1 -1.50804432 -0.129839209 1.35326117 -1.1847400      0.2361203\n2 -0.27853733 -0.002888650 0.03449966 -1.4840499      0.1377957\n3 -0.05855375 -0.002987109 0.03567205 -0.2942051      0.7686012\n4 -0.08423260 -0.003264935 0.03897899 -0.4101062      0.6817280\n5 -0.02986466 -0.002128342 0.02543855 -0.1739012      0.8619431\n6  0.33735900 -0.005612861 0.06685225  1.3264793      0.1846810\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI_amt[fips_amt,], \n  row.names=Thai_total_for_prov$ADM1_EN[fips_amt]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                  Ii        E.Ii      Var.Ii        Z.Ii\nPattani                  -5.7522e-02 -5.7584e-03  6.8575e-02 -1.9767e-01\nAng Thong                 3.3736e-01 -5.6129e-03  6.6852e-02  1.3265e+00\nNong Bua Lam Phu          2.4326e-01 -5.5605e-03  6.6232e-02  9.6684e-01\nChai Nat                  3.1443e-01 -4.6751e-03  5.5735e-02  1.3517e+00\nSamut Songkhram          -1.5504e-01 -4.3454e-03  5.1822e-02 -6.6196e-01\nChachoengsao             -4.7882e-01 -4.3028e-03  5.1316e-02 -2.0947e+00\nLamphun                  -2.7324e-02 -4.1016e-03  4.8926e-02 -1.0499e-01\nNong Khai                 2.3278e-01 -4.0705e-03  4.8557e-02  1.0748e+00\nNakhon Phanom             2.3487e-01 -3.9054e-03  4.6596e-02  1.1062e+00\nSing Buri                 2.9178e-01 -3.8246e-03  4.5635e-02  1.3838e+00\nSamut Sakhon             -5.9765e-02 -3.7769e-03  4.5068e-02 -2.6373e-01\nSuphan Buri               2.7567e-01 -3.7623e-03  4.4895e-02  1.3188e+00\nLop Buri                  2.6605e-01 -3.7262e-03  4.4466e-02  1.2793e+00\nSaraburi                  2.5607e-01 -3.6808e-03  4.3925e-02  1.2394e+00\nBueng Kan                 2.4349e-01 -3.6642e-03  4.3728e-02  1.1819e+00\nPhichit                   2.1841e-01 -3.6016e-03  4.2984e-02  1.0708e+00\nUttaradit                 1.2484e-01 -3.3648e-03  4.0168e-02  6.3971e-01\nNakhon Sawan              2.5830e-01 -3.3224e-03  3.9663e-02  1.3137e+00\nNakhon Pathom            -5.4433e-02 -3.2806e-03  3.9165e-02 -2.5847e-01\nPathum Thani             -8.4233e-02 -3.2649e-03  3.8979e-02 -4.1011e-01\nMaha Sarakham             1.8807e-01 -3.2442e-03  3.8732e-02  9.7212e-01\nKamphaeng Phet            1.8255e-01 -3.1626e-03  3.7761e-02  9.5568e-01\nMukdahan                  2.0915e-01 -3.0974e-03  3.6985e-02  1.1036e+00\nPhayao                   -6.6624e-02 -3.0813e-03  3.6793e-02 -3.3127e-01\nNonthaburi               -5.8554e-02 -2.9871e-03  3.5672e-02 -2.9421e-01\nPhatthalung              -1.7806e-01 -2.9558e-03  3.5299e-02 -9.3198e-01\nSamut Prakan             -2.7854e-01 -2.8886e-03  3.4500e-02 -1.4840e+00\nChaiyaphum                1.9224e-01 -2.8884e-03  3.4497e-02  1.0506e+00\nRoi Et                    2.0043e-01 -2.8802e-03  3.4399e-02  1.0962e+00\nRatchaburi               -1.1302e-01 -2.6999e-03  3.2252e-02 -6.1429e-01\nYasothon                  1.6814e-01 -2.5723e-03  3.0731e-02  9.7381e-01\nSa Kaeo                   1.0400e-01 -2.3492e-03  2.8072e-02  6.3471e-01\nSurin                     1.6933e-01 -2.2140e-03  2.6460e-02  1.0546e+00\nSi Sa Ket                 1.4780e-01 -2.2121e-03  2.6437e-02  9.2258e-01\nUthai Thani               1.8663e-01 -2.1408e-03  2.5587e-02  1.1801e+00\nPhra Nakhon Si Ayutthaya -2.9865e-02 -2.1283e-03  2.5439e-02 -1.7390e-01\nSakon Nakhon              1.8025e-01 -2.0560e-03  2.4575e-02  1.1629e+00\nPhrae                     1.3037e-01 -1.8907e-03  2.2604e-02  8.7972e-01\nKalasin                   1.5973e-01 -1.8303e-03  2.1883e-02  1.0921e+00\nAmnat Charoen             1.4295e-01 -1.7371e-03  2.0771e-02  1.0039e+00\nSukhothai                 1.1311e-01 -1.6607e-03  1.9858e-02  8.1445e-01\nLoei                      1.3277e-01 -1.3131e-03  1.5708e-02  1.0699e+00\nBuri Ram                  1.1963e-01 -1.1598e-03  1.3876e-02  1.0255e+00\nPhetchabun                1.2629e-01 -1.1065e-03  1.3239e-02  1.1072e+00\nKhon Kaen                 1.2737e-01 -1.0502e-03  1.2566e-02  1.1456e+00\nNakhon Nayok             -4.6308e-02 -1.0330e-03  1.2361e-02 -4.0723e-01\nPhitsanulok               1.1189e-01 -9.6393e-04  1.1535e-02  1.0508e+00\nUdon Thani                1.1562e-01 -8.1649e-04  9.7717e-03  1.1778e+00\nNakhon Ratchasima         7.5297e-02 -5.8334e-04  6.9830e-03  9.0805e-01\nNakhon Si Thammarat      -3.5477e-01 -4.7004e-04  5.6274e-03 -4.7230e+00\nUbon Ratchathani          7.8349e-02 -4.3726e-04  5.2351e-03  1.0889e+00\nTak                       8.4558e-02 -4.2203e-04  5.0528e-03  1.1955e+00\nPrachin Buri             -3.3085e-03 -2.9059e-04  3.4796e-03 -5.1161e-02\nYala                      3.0558e-04 -2.0620e-04  2.4694e-03  1.0299e-02\nNarathiwat                4.1699e-04 -1.8560e-04  2.2226e-03  1.2782e-02\nKanchanaburi              5.9377e-02 -1.6943e-04  2.0290e-03  1.3220e+00\nLampang                   1.8328e-02 -9.6259e-05  1.1529e-03  5.4264e-01\nNan                       1.1167e-02 -7.3659e-05  8.8221e-04  3.7845e-01\nSatun                     1.6107e-03 -6.0923e-05  7.2968e-04  6.1884e-02\nChanthaburi               1.5947e-02 -1.2956e-05  1.5518e-04  1.2812e+00\nChumphon                  1.4525e-01 -2.5567e-04  3.0616e-03  2.6297e+00\nRanong                    3.4008e-01 -4.4125e-04  5.2829e-03  4.6850e+00\nMae Hong Son              1.7977e-02 -1.1533e-03  1.3798e-02  1.6286e-01\nRayong                    1.5457e-01 -1.5642e-03  1.8706e-02  1.1416e+00\nPhetchaburi              -1.2082e-01 -2.5696e-03  3.0699e-02 -6.7490e-01\nTrang                     7.0102e-01 -3.8950e-03  4.6472e-02  3.2699e+00\nSongkhla                 -1.1497e-01 -7.6719e-03  9.1187e-02 -3.5533e-01\nChiang Rai               -8.5294e-02 -1.0065e-02  1.1935e-01 -2.1776e-01\nPrachuap Khiri Khan      -2.1731e-01 -1.0630e-02  1.2597e-01 -5.8233e-01\nChiang Mai               -5.5832e-02 -1.3067e-02  1.5447e-01 -1.0881e-01\nPhangnga                  2.0359e+00 -1.7556e-02  2.0659e-01  4.5178e+00\nTrat                      3.9271e-01 -2.6245e-02  3.0610e-01  7.5723e-01\nKrabi                     2.8622e+00 -4.5766e-02  5.2308e-01  4.0207e+00\nSurat Thani               3.5031e+00 -7.1979e-02  8.0009e-01  3.9969e+00\nChon Buri                 9.4504e-01 -7.8029e-02  8.6168e-01  1.1021e+00\nBangkok                  -1.5080e+00 -1.2984e-01  1.3533e+00 -1.1847e+00\nPhuket                    5.0943e+00 -4.4770e-01  2.9617e+00  3.2203e+00\n                         Pr.z....E.Ii..\nPattani                          0.8433\nAng Thong                        0.1847\nNong Bua Lam Phu                 0.3336\nChai Nat                         0.1765\nSamut Songkhram                  0.5080\nChachoengsao                     0.0362\nLamphun                          0.9164\nNong Khai                        0.2825\nNakhon Phanom                    0.2687\nSing Buri                        0.1664\nSamut Sakhon                     0.7920\nSuphan Buri                      0.1872\nLop Buri                         0.2008\nSaraburi                         0.2152\nBueng Kan                        0.2372\nPhichit                          0.2842\nUttaradit                        0.5224\nNakhon Sawan                     0.1890\nNakhon Pathom                    0.7960\nPathum Thani                     0.6817\nMaha Sarakham                    0.3310\nKamphaeng Phet                   0.3392\nMukdahan                         0.2698\nPhayao                           0.7404\nNonthaburi                       0.7686\nPhatthalung                      0.3513\nSamut Prakan                     0.1378\nChaiyaphum                       0.2934\nRoi Et                           0.2730\nRatchaburi                       0.5390\nYasothon                         0.3302\nSa Kaeo                          0.5256\nSurin                            0.2916\nSi Sa Ket                        0.3562\nUthai Thani                      0.2379\nPhra Nakhon Si Ayutthaya         0.8619\nSakon Nakhon                     0.2449\nPhrae                            0.3790\nKalasin                          0.2748\nAmnat Charoen                    0.3154\nSukhothai                        0.4154\nLoei                             0.2847\nBuri Ram                         0.3052\nPhetchabun                       0.2682\nKhon Kaen                        0.2520\nNakhon Nayok                     0.6838\nPhitsanulok                      0.2934\nUdon Thani                       0.2389\nNakhon Ratchasima                0.3639\nNakhon Si Thammarat              0.0000\nUbon Ratchathani                 0.2762\nTak                              0.2319\nPrachin Buri                     0.9592\nYala                             0.9918\nNarathiwat                       0.9898\nKanchanaburi                     0.1862\nLampang                          0.5874\nNan                              0.7051\nSatun                            0.9507\nChanthaburi                      0.2001\nChumphon                         0.0085\nRanong                           0.0000\nMae Hong Son                     0.8706\nRayong                           0.2536\nPhetchaburi                      0.4997\nTrang                            0.0011\nSongkhla                         0.7223\nChiang Rai                       0.8276\nPrachuap Khiri Khan              0.5603\nChiang Mai                       0.9134\nPhangnga                         0.0000\nTrat                             0.4489\nKrabi                            0.0001\nSurat Thani                      0.0001\nChon Buri                        0.2704\nBangkok                          0.2361\nPhuket                           0.0013\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_total_for_prov.localMI_amt <- cbind(Thai_total_for_prov,localMI_amt) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_localMI_amt_Ii <- tm_shape(Thai_total_for_prov.localMI_amt) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nmap_localMI_amt_P <- tm_shape(Thai_total_for_prov.localMI_amt) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\ntmap_arrange(map_localMI_amt_Ii, \n             map_localMI_amt_P , \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-62-1.png){width=1152}\n:::\n:::\n\n\n\nBased on the generated outputs, the we have noted that there are two areas of interest. The region at the gulf of Thailand, is of a higher Local Moran Statistic and is statistically significant. This is not un expected as the region is home the exclusive beach resorts which likely indicative of higher spending power.\n\nIt is observed that the Mae Hong Son and the Prachinbur seems to be outliner, This is not surprising as they are not popular tourists town for foreign tourist.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnci <- moran.plot(Thai_total_for_prov$lag.Amt_rev_per_for_tourist, rswm_knn6,\n                  labels=as.character(Thai_total_for_prov$ADM1_EN), \n                  xlab=\"Amt of Revenue per foreign tourists\", \n                  ylab=\"Spatially Lag Amt of Revenue per foreign tourists\")\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n\nBased on the above graph, there are 4 quarters\n\n“High-High” - Top right corner : Positive Autocorrelation Cluster. Provinces here have high percentage of higher amount of revenue per foreign tourist surrounded by other provinces with high amount of foreign spending. It is noted that these provinces are located in southern Thailand near to the gulf of Thailand which of exclusive beach resorts.\n\n“Low-High” - Top left corner: Negative Autocorrelation Cluster. Provinces here have low amount of revenue per foreign tourist surrounded by other provinces with high amount of revenue per foreign tourists.\n\n“High-Low” - Bottom right corner: Negative Autocorrelation Cluster. Provinces here have high amount of revenue per foreign tourist surrounded by other provinces with low amount of revenue per foreign tourists. It is noted that Bangkok is in this region.\n\n“Low-Low” - Bottom left corner : Positive Autocorrelation Cluster. Provinces here have low amount of revenue per foreign tourist surrounded by other provinces with low amount of revenue per foreign tourists\n\n### Lisa Map:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Step 1\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI_amt))\n\n#Step 2\nThai_total_for_prov$lag_Amt_rev_per_for_tourist <- lag.listw(rswm_knn6, Thai_total_for_prov$Amt_rev_per_for_tourist)\nDV <- Thai_total_for_prov$lag_Amt_rev_per_for_tourist - mean(Thai_total_for_prov$Amt_rev_per_for_tourist)     \n#Step 3\nLM_I <- localMI_amt[,1]\n\n#Step 4\nsignif <- 0.05\n\n#Step 5\nquadrant[DV <0 & LM_I>0] <- 1 #low-low\nquadrant[DV >0 & LM_I<0] <- 2 #high-low\nquadrant[DV <0 & LM_I<0] <- 3 #low-high\nquadrant[DV >0 & LM_I>0] <- 4 #high-high\n\n#Step 6\nquadrant[localMI_amt[,5]>signif]<- 0\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_total_for_prov.localMI_amt$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(Thai_total_for_prov.localMI_amt) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(amt, LISAmap, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\nAs per Moran scatter plot, we noted thet region of southern thailand are in the high-high quarter, this could be due to the high concentration of island beach resorts in the provinces.\n\n## Hot Spot Area Analysis\n\nNext we will be doing hot spot analysis. AS per earlier discussion, we will using the spatial weights generated using the adaptive distance matrix to detect hot or cold spots. Hot spot is defined as the areas with high values related to its surroundings area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_lw <- nb2listw(knn6,\n                   style = \"B\",\n                   zero.policy = TRUE)\nknn_lw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 462 \nPercentage nonzero weights: 7.792208 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 77 5929 462 820 11500\n```\n\n\n:::\n:::\n\n\n\n## Gi statistics using fixed distance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(Thai_total_for_prov$ADM1_EN)\ngi.fixed <- localG(Thai_total_for_prov$Amt_rev_per_for_tourist, knn_lw)\ngi.fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.18473998  1.48404987  0.29420505  0.41010622  0.17390119 -1.32647934\n [7] -1.27934010 -1.38376421 -1.35166988 -1.23937666  1.10212995  1.14159542\n[13]  1.28121670  0.75723394  2.09472651  0.05116116  0.40723063 -0.63471467\n[19] -0.90804750 -1.02545101 -1.05459249 -0.92258216 -1.08890353 -0.97380932\n[25] -1.05059129 -1.00389814 -1.18191680 -0.96684035 -1.14562456 -1.17784735\n[31] -1.06985642 -1.07482494 -0.97212150 -1.09619761 -1.09211954 -1.16292219\n[37] -1.10615455 -1.10363323 -0.10880880  0.10498879 -0.54264019 -0.63970646\n[43] -0.87972323 -0.37844539  0.33126759 -0.21775793  0.16286007 -1.31365312\n[49] -1.18014002 -0.95567687 -1.19550505 -0.81444879 -1.05077077 -1.07082845\n[55] -1.10720235  0.61428937 -1.32195334 -1.31881137  0.25847261  0.26373250\n[61]  0.66195565 -0.67489605 -0.58233411  4.72299342  4.02072702  4.51783877\n[67]  3.22032996  3.99689410  4.68498447  2.62965812 -0.35533392 -0.06188359\n[73]  3.26993568  0.93197932  0.19766965 -0.01029898 -0.01278158\nattr(,\"internals\")\n              Gi      E(Gi)        V(Gi)       Z(Gi) Pr(z != E(Gi))\n [1,] 0.03514776 0.07894737 0.0013667667 -1.18473998   2.361203e-01\n [2,] 0.13435075 0.07894737 0.0013937199  1.48404987   1.377957e-01\n [3,] 0.08992889 0.07894737 0.0013932360  0.29420505   7.686012e-01\n [4,] 0.09424769 0.07894737 0.0013919010  0.41010622   6.817280e-01\n [5,] 0.08544879 0.07894737 0.0013976928  0.17390119   8.619431e-01\n [6,] 0.02963705 0.07894737 0.0013818934 -1.32647934   1.846810e-01\n [7,] 0.03125401 0.07894737 0.0013897726 -1.27934010   2.007773e-01\n [8,] 0.02736931 0.07894737 0.0013893314 -1.38376421   1.664307e-01\n [9,] 0.02863201 0.07894737 0.0013856701 -1.35166988   1.764809e-01\n[10,] 0.03274042 0.07894737 0.0013899779 -1.23937666   2.152060e-01\n[11,] 0.12040136 0.07894737 0.0014147089  1.10212995   2.704052e-01\n[12,] 0.12214581 0.07894737 0.0014318969  1.14159542   2.536222e-01\n[13,] 0.12722622 0.07894737 0.0014199358  1.28121670   2.001176e-01\n[14,] 0.10773361 0.07894737 0.0014451395  0.75723394   4.489097e-01\n[15,] 0.15696690 0.07894737 0.0013872412  2.09472651   3.619531e-02\n[16,] 0.08086948 0.07894737 0.0014114920  0.05116116   9.591971e-01\n[17,] 0.09420959 0.07894737 0.0014046063  0.40723063   6.838386e-01\n[18,] 0.05522831 0.07894737 0.0013964903 -0.63471467   5.256145e-01\n[19,] 0.04487048 0.07894737 0.0014083248 -0.90804750   3.638531e-01\n[20,] 0.04052797 0.07894737 0.0014036900 -1.02545101   3.051504e-01\n[21,] 0.03952731 0.07894737 0.0013972212 -1.05459249   2.916117e-01\n[22,] 0.04446165 0.07894737 0.0013972315 -0.92258216   3.562250e-01\n[23,] 0.03806218 0.07894737 0.0014097861 -1.08890353   2.761964e-01\n[24,] 0.04257174 0.07894737 0.0013953182 -0.97380932   3.301512e-01\n[25,] 0.03972609 0.07894737 0.0013937210 -1.05059129   2.934463e-01\n[26,] 0.04138563 0.07894737 0.0013999487 -1.00389814   3.154277e-01\n[27,] 0.03488147 0.07894737 0.0013900533 -1.18191680   2.372387e-01\n[28,] 0.04300355 0.07894737 0.0013820984 -0.96684035   3.336238e-01\n[29,] 0.03601350 0.07894737 0.0014044793 -1.14562456   2.519505e-01\n[30,] 0.03477751 0.07894737 0.0014062871 -1.17784735   2.388575e-01\n[31,] 0.03887935 0.07894737 0.0014026349 -1.06985642   2.846839e-01\n[32,] 0.03890029 0.07894737 0.0013882455 -1.07482494   2.824531e-01\n[33,] 0.04267800 0.07894737 0.0013919992 -0.97212150   3.309901e-01\n[34,] 0.03802289 0.07894737 0.0013937619 -1.09619761   2.729923e-01\n[35,] 0.03809283 0.07894737 0.0013993949 -1.09211954   2.747806e-01\n[36,] 0.03546439 0.07894737 0.0013980971 -1.16292219   2.448611e-01\n[37,] 0.03772219 0.07894737 0.0013889717 -1.10615455   2.686596e-01\n[38,] 0.03776098 0.07894737 0.0013927010 -1.10363323   2.697523e-01\n[39,] 0.07481092 0.07894737 0.0014451955 -0.10880880   9.133541e-01\n[40,] 0.08285897 0.07894737 0.0013881100  0.10498879   9.163847e-01\n[41,] 0.05853818 0.07894737 0.0014145801 -0.54264019   5.873776e-01\n[42,] 0.05508511 0.07894737 0.0013914313 -0.63970646   5.223635e-01\n[43,] 0.04604241 0.07894737 0.0013990416 -0.87972323   3.790093e-01\n[44,] 0.06471113 0.07894737 0.0014150907 -0.37844539   7.050998e-01\n[45,] 0.09131026 0.07894737 0.0013927786  0.33126759   7.404424e-01\n[46,] 0.07067277 0.07894737 0.0014439292 -0.21775793   8.276177e-01\n[47,] 0.08510656 0.07894737 0.0014302692  0.16286007   8.706286e-01\n[48,] 0.02994212 0.07894737 0.0013916300 -1.31365312   1.889630e-01\n[49,] 0.03482806 0.07894737 0.0013976237 -1.18014002   2.379445e-01\n[50,] 0.04328656 0.07894737 0.0013923877 -0.95567687   3.392355e-01\n[51,] 0.03405699 0.07894737 0.0014099500 -1.19550505   2.318898e-01\n[52,] 0.04846900 0.07894737 0.0014004120 -0.81444879   4.153879e-01\n[53,] 0.03955923 0.07894737 0.0014051252 -1.05077077   2.933639e-01\n[54,] 0.03901914 0.07894737 0.0013903377 -1.07082845   2.842466e-01\n[55,] 0.03745948 0.07894737 0.0014040699 -1.10720235   2.682065e-01\n[56,] 0.10188814 0.07894737 0.0013946651  0.61428937   5.390241e-01\n[57,] 0.02925126 0.07894737 0.0014132292 -1.32195334   1.861837e-01\n[58,] 0.02978541 0.07894737 0.0013896103 -1.31881137   1.872322e-01\n[59,] 0.08859026 0.07894737 0.0013918272  0.25847261   7.960422e-01\n[60,] 0.08877842 0.07894737 0.0013895449  0.26373250   7.919861e-01\n[61,] 0.10360074 0.07894737 0.0013870589  0.66195565   5.079996e-01\n[62,] 0.05338241 0.07894737 0.0014348832 -0.67489605   4.997418e-01\n[63,] 0.05681694 0.07894737 0.0014442260 -0.58233411   5.603417e-01\n[64,] 0.25626049 0.07894737 0.0014094416  4.72299342   2.323984e-06\n[65,] 0.23137140 0.07894737 0.0014371356  4.02072702   5.801881e-05\n[66,] 0.25074287 0.07894737 0.0014459794  4.51783877   6.247402e-06\n[67,] 0.17824410 0.07894737 0.0009507561  3.22032996   1.280431e-03\n[68,] 0.22953495 0.07894737 0.0014194922  3.99689410   6.417899e-05\n[69,] 0.25587404 0.07894737 0.0014261668  4.68498447   2.799812e-06\n[70,] 0.17819581 0.07894737 0.0014244552  2.62965812   8.547078e-03\n[71,] 0.06545272 0.07894737 0.0014422801 -0.35533392   7.223394e-01\n[72,] 0.07661919 0.07894737 0.0014154116 -0.06188359   9.506555e-01\n[73,] 0.20293142 0.07894737 0.0014376501  3.26993568   1.075719e-03\n[74,] 0.11373641 0.07894737 0.0013933894  0.93197932   3.513472e-01\n[75,] 0.08629400 0.07894737 0.0013813275  0.19766965   8.433035e-01\n[76,] 0.07856028 0.07894737 0.0014126548 -0.01029898   9.917827e-01\n[77,] 0.07846692 0.07894737 0.0014129703 -0.01278158   9.898020e-01\nattr(,\"cluster\")\n [1] High Low  Low  Low  Low  Low  Low  Low  Low  Low  High High High High Low \n[16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[31] Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[61] Low  High High Low  High High High High High High High Low  High Low  Low \n[76] Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Thai_total_for_prov$Amt_rev_per_for_tourist, listw = knn_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_total_for_prov.gi <- cbind(Thai_total_for_prov, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGimap <-tm_shape(Thai_total_for_prov.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(Total_rev, Gimap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n\n#### observations\n\nBased on generated maps, the hot-spots are located the province having islands eg. Phunket, Krabi, Trang where beach resorts are located. The cold spots are located at north east Thailand near the border with Laos \\### Gi statistics using adaptive distance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(Thai_total_for_prov$ADM1_EN)\ngi.adaptive <- localG(Thai_total_for_prov$Amt_rev_per_for_tourist, knn_lw)\nThai_total_for_pro_adp.gi <- cbind(Thai_total_for_prov, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGimap_adap <-tm_shape(Thai_total_for_pro_adp.gi) +\n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(Gimap_adap, Gimap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n\n#### observations\n\nBased on the above maps, it is noted that the Gi statistic calculated by fixed distance or adaptive distance is the same. Hence the observation made for Local Gi derived by fixed method is valid.\n\n## Time Series\n\nIn this section, we will be doing spatial temporal analysis tourism data. We will be using the total revenue generated from foreign tourists. We use this indicator instead of the amount of the revenue spent per foreign tourists as it will be able to provide more Representative of more region of Thailand and it is readily available in the raw data. By using a more general indicator, it will help us to understand the changes in all regions and also to be able to capture a border based instead of just focusing on the\n\nWe will start of with preparing the timecube data and ensuring that it is in spacetime.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n Tourdata_st <- spacetime(tour_data_wide, SAB_1,\n                      .loc_col = \"ADM1_EN\",\n                      .time_col = \"Date_tour\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(Tourdata_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n### Emerging Hotpots\n\nAfter ensuring that the data is in correct format,the following code is used to run the emerging hot spot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = Tourdata_st, \n  .var = \"revenue_foreign\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(ehsa ,\"data/rds/ehsa.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <-read_rds(\"data/rds/ehsa.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_ehsa <- SAB_1 %>%\n  left_join(ehsa,\n            by = join_by(ADM1_EN== location))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(Thai_ehsa ,\"data/rds/Thai_ehsa.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nThai_ehsa<-read_rds(\"data/rds/Thai_ehsa.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig <- Thai_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(Thai_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take_home_02_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n\n## Conclusions:\n\nBased on the local Moran results, using the indicator: Amount of revenue per Foreign Tourists, there are some spatial correlation of the tourist hot-spot at the region near to the gulf of Thailand eg. Phunket and Krabi which are home to the exclusive beach resorts. Other that regions mentioned, other spatial correlation is not observed.\n\nHowever it is noted the amount of revenue per foreign tourist is a very narrow indicator. Bangkok for example, has very high revenue but also very high number of foreign tourists leading to it being not in the top 5 provinces.\n\nHence during the spatial temporal analysis, a more general indicator revenue from foreign tourists is used to analyse if there are any emerging hot-spots or cold spots.\n\nFrom the generated map for the emerging hotspot, there are no consecutive hot-spots or cold-spots. There is only one sporadic hot-spot at the province of Ang Thong. Based on Wikipedia, it has more than 200 Buddhist Temples. The definition of the sporadic hot-spot is the final time step interval with history of on and off with more than 90 of the time interval being a statistically significant hotspot. This maybe due to religious activities.\n\nFor sporadic cold spots, there are provinces which has a history of being a statistically significant cold spot during a prior time steps. They are Yala, Chumphon, Chanthaburi, Sa Kaew, Mukdahan, Loei, Chainat, kamphaeng-Phet, Lamphun.\n",
    "supporting": [
      "Take_home_02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}