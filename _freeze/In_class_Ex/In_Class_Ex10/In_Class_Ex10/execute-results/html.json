{
  "hash": "15739f645facac9ba9a4a10c33f2247c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 10\"\nauthor: \"Dew Stella\"\ndate: \"November 04, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n\n\n#Importing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial\"\nfile_list <- list.files(path = folder_path, \n                        pattern = \"^realis.*\\\\.csv$\", \n                        full.names = TRUE)\n\nrealis_data <- file_list %>%\n  map_dfr(read_csv)\n```\n:::\n\n\nAs I used the condo resale data to do this hands on exercise hence the code is slightly different from what was used in class.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>%\n  mutate(`Sale Date` = dmy(`Sale Date`)) %>%\n  filter(`Type of Sale` == \"Resale\" &\n           `Property Type` == \"Condominium\")\n```\n:::\n\n\n\n\n## Geocoding\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcode <- unique(condo_resale$`Postal Code`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in postcode){\n  query <- list('searchVal'=postcode, 'returnGeom'='Y', \n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  if ((content(res)$found)!=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {not_found = data.frame(postcode)\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>%\n  select(c(6:8)) %>%\n  rename(POSTAL = `results.POSTAL`,\n         XCOORD = `results.X`,\n         YCOORD = `results.Y`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(found, \"data/rds/found.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <-read_rds(\"data/rds/found.rds\")\n```\n:::\n\n\n\n## Converting to Point Feature Data Frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert Postal Code to character in the condo_resale data frame\ncondo_resale$`Postal Code` <- as.character(condo_resale$`Postal Code`)\n\ncondo_resale_geocoded = left_join(\n  condo_resale, found, \n  by = c('Postal Code' = 'POSTAL'))\n```\n:::\n\n\n\n\nAs the postal code was not converted to character when reading the csv file.\n\nThere are mismatch results from geo-coding.Hence to rectify, we will drop the missing data without xy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop rows with missing coordinates \ncondo_resale_geocoded <- na.omit(condo_resale_geocoded, cols = c(\"XCOORD\", \"YCOORD\"))\n\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded, \n                            coords = c(\"XCOORD\",\n                                       \"YCOORD\"),\n                            crs=3414)\n```\n:::\n\n\n\n### Cleaning Spatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- condo_resale_sf %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n\ncondo_resale_sf <- condo_resale_sf %>%\n  st_jitter(amount = 2)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}